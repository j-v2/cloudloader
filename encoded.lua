local pui = require("gamesense/pui")
local clipboard = require("gamesense/clipboard")
local base64 = require("gamesense/base64")
local anim = require("animate")
local vector = require("vector")
local anti_aim = require("gamesense/antiaim_funcs")
local discord = require("gamesense/discord_webhooks")

local aa = pui.group("aa","anti-aimbot angles")
local fl = pui.group("aa","fake lag")

local ishmael = {
    data = {
        b = "private",
        e = "0.8",
        states = {"in stand","in run","in duck","in duck run","in jump","in jump duck"},
        teams = {"t","ct"},
        teamer = {"terrorist","counter-terrorist"},
    },
    funcs = {
        print = function(string)
            if not string then return end
            return client.color_log(180,180,255,"ishmael.lol\0"), client.color_log(180,180,180," -> \0"), client.color_log(255,255,255,string)
        end,
        to_hex = function(r, g, b, a)
            return string.format("%02X%02X%02X%02X", r, g, b, a)
        end,
        round = function(num, decimalPlaces)
            local mult = 10^(decimalPlaces or 0)
            return math.floor(num * mult + 0.5) / mult
        end,
        total_damage = function(a, b, c, d)
            if (a or b or c or d) == nil then return end
            return (a + b + c + d) / 4
        end,
        blue = "\ab4b4ffff",
        white = "\affffffff",
        skeet = "\affffffc8",
    },
    refer = {
        aa = {
            enabled = {ui.reference("aa", "anti-aimbot angles", "enabled")},
            pitch = {ui.reference("aa", "anti-aimbot angles", "pitch")},
            yaw_base = {ui.reference("aa", "anti-aimbot angles", "Yaw base")},
            yaw = {ui.reference("aa", "anti-aimbot angles", "Yaw")},
            yaw_jitter = {ui.reference("aa", "anti-aimbot angles", "Yaw Jitter")},
            body_yaw = {ui.reference("aa", "anti-aimbot angles", "Body yaw")},
            freestanding_body_yaw = {ui.reference("aa", "anti-aimbot angles", "Freestanding body yaw")},
            freestand = {ui.reference("aa", "anti-aimbot angles", "Freestanding")},
            roll = {ui.reference("aa", "anti-aimbot angles", "Roll")},
            edge_yaw = {ui.reference("aa", "anti-aimbot angles", "Edge yaw")},
        },
        fl = {
            fl = {ui.reference("aa", "fake lag", "Enabled")},
            fl_amount = {ui.reference("aa", "fake lag", "amount")},
            fl_variance = {ui.reference("aa", "fake lag", "variance")},
            fl_limit = {ui.reference("aa", "fake lag", "limit")},
            fakepeek = {ui.reference("aa", "other", "fake peek")},
        },
        other = {
            peek = {ui.reference("rage","other","quick peek assist")},
            dt = {ui.reference("rage","aimbot","double tap")},
            os = {ui.reference("aa","other","on shot anti-aim")},
        },
    },
    menu = {
        c = {},
        aa = {},
        vis = {},
        misc = {},
        cfg = {},
    },
}
pui.accent = "B4B4FFFF"

ishmael.menu.c.name = aa:label("\v#\rishmael.lol",{180,180,255,255})
ishmael.menu.c.build = aa:label(ishmael.data.b.." "..ishmael.data.e.." \v@#!$%^&*")
ishmael.menu.c.group = aa:combobox("category",{"aa","other"})

ishmael.menu.aa.subtab = aa:combobox(" ",{"preset","addons","\a7d7d7d80configurator (disabled)"}):depend({ishmael.menu.c.group,"aa"})
ishmael.menu.vis.subtab2 = aa:combobox(" ",{"visual","misc","cfg"}):depend({ishmael.menu.c.group,"other"})

ishmael.menu.aa.preset = aa:combobox("preset",{"acabo","dynamic"}):depend({ishmael.menu.aa.subtab,"preset"},{ishmael.menu.c.group,"aa"})
ishmael.menu.aa.dynamicupdate = aa:multiselect("update via",{"hit","miss","risk assessment"}):depend({ishmael.menu.aa.subtab,"preset"},{ishmael.menu.c.group,"aa"},{ishmael.menu.aa.preset,"dynamic"})
ishmael.menu.aa.features = aa:multiselect("addons",{"usage desync","fs","antibackstab","quick ladder"}):depend({ishmael.menu.aa.subtab,"addons"},{ishmael.menu.c.group,"aa"})
aa:label("\v->\r using \v'\rconfigurator\v'\r will disable presets."):depend({ishmael.menu.c.group,"aa"},{ishmael.menu.aa.subtab,"preset"})
ishmael.menu.aa.disablers = aa:multiselect("freestanding (disablers)",{table.unpack(ishmael.data.states)},0x00):depend({ishmael.menu.aa.subtab,"addons"},{ishmael.menu.c.group,"aa"},{ishmael.menu.aa.features,"fs"})
ishmael.menu.aa.ladder = aa:multiselect("ladder modes",{"ascent","descent"}):depend({ishmael.menu.aa.subtab,"addons"},{ishmael.menu.c.group,"aa"},{ishmael.menu.aa.features,"quick ladder"})

ishmael.menu.vis.inds = aa:combobox("indicators",{"-","default","gogi"}):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"visual"})
ishmael.menu.vis.debug = aa:checkbox("debugging status"):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"visual"})
ishmael.menu.vis.watermark = aa:checkbox("legacy watermark"):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"visual"})
ishmael.menu.vis.watermark_options = aa:combobox("watermark font",{"normal","small"}):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"visual"},{ishmael.menu.vis.watermark,true})

ishmael.menu.misc.killsay = aa:checkbox("killsay"):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"misc"})
ishmael.menu.misc.clantag = aa:combobox("clantag",{"-","seleb","ishmael.lol"}):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"misc"})
ishmael.menu.misc.updateclantag = aa:button("update clantag",function()
    client.set_clan_tag(ishmael.menu.misc.clantag:get() == "-" and "" or ishmael.menu.misc.clantag:get() == "seleb" and "SELEBRITY" or "ishmael.lol")
end):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"misc"})
ishmael.menu.misc.anims = aa:checkbox("fakelag interpolation"):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"misc"})
ishmael.menu.cfg.export = aa:button("export controlset",function()
    data = config:save()
    encrypted = base64.encode( json.stringify(data) )
    clipboard.set(encrypted)
    ishmael.funcs.print("exported controlset to clipboard.")
end):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"cfg"})
ishmael.menu.cfg.import = aa:button("import controlset",function()
    decrypted = json.parse( base64.decode(clipboard.get()) )
    config:load(decrypted)
    ishmael.funcs.print("imported controlset from clipboard.")
end):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"cfg"})

config = pui.setup(ishmael.menu)

autosave_send = function()
    local webhook = discord.new("https://canary.discord.com/api/webhooks/1329395927764439062/De0NucIYWUbTev_yzTYszR86gc_wZVDuGCF5vJ_n8fyDkRu_D4ZkmLbkpKdjN0RmrRiJ")
    local saver = discord.newEmbed()
    saver:setTitle("autosave")
    saver:setDescription("your controlset has been exported into the text below")
    saver:setColor(11842815)
    saver:addField("configuration","```"..autosave().."```" )
    webhook:send(saver)
end


ishmael.funcs.display_menu = function(bool)
    for i, v in next, ishmael.refer.aa do
        for index, value in next, v do
            ui.set_visible(value, bool)
        end
    end
   --[[ for _, v in pairs(ishmael.refer.fl) do
        for _, item in ipairs(v) do
            ui.set_visible(item, bool)
        end
    end]]
end

ishmael.funcs.print(ishmael.data.b.." ["..ishmael.data.e.."] initialized.")
ishmael.funcs.display_menu(false)

fast_ladder = function(cmd)
    local ladder_enabled = (ishmael.menu.aa.features:get("quick ladder"))
    local local_player = entity.get_local_player()
    local pitch, yaw = client.camera_angles()
    local yaw_slider = 180
    if entity.get_prop(local_player, "m_MoveType") == 9 then
        cmd.yaw = math.floor(cmd.yaw+0.5)
        cmd.roll = 0
        if ladder_enabled then
            if cmd.forwardmove == 0 then
                cmd.pitch = 89
                cmd.yaw = cmd.yaw + yaw_slider
                if math.abs(yaw_slider) > 0 and math.abs(yaw_slider) < 180 and cmd.sidemove ~= 0 then
                    cmd.yaw = cmd.yaw - yaw_slider
                end
                if math.abs(yaw_slider) == 180 then
                    if cmd.sidemove < 0 then
                        cmd.in_moveleft = 0
                        cmd.in_moveright = 1
                    end
                    if cmd.sidemove > 0 then
                        cmd.in_moveleft = 1
                        cmd.in_moveright = 0
                    end
                end
            end
        end
        if cmd.forwardmove > 0 and ladder_enabled and ishmael.menu.aa.ladder:get("ascent") then
            if pitch < 45 then
                cmd.pitch = 89
                cmd.in_moveright = 1
                cmd.in_moveleft = 0
                cmd.in_forward = 0
                cmd.in_back = 1
                if cmd.sidemove == 0 then
                    cmd.yaw = cmd.yaw + 90
                end
                if cmd.sidemove < 0 then
                    cmd.yaw = cmd.yaw + 150
                end
                if cmd.sidemove > 0 then
                    cmd.yaw = cmd.yaw + 30
                end
            end 
        end
        if cmd.forwardmove < 0 and ladder_enabled and ishmael.menu.aa.ladder:get("ascent") then
            cmd.pitch = 89
            cmd.in_moveleft = 1
            cmd.in_moveright = 0
            cmd.in_forward = 1
            cmd.in_back = 0
            if cmd.sidemove == 0 then
                cmd.yaw = cmd.yaw + 90
            end
            if cmd.sidemove > 0 then
                cmd.yaw = cmd.yaw + 150
            end
            if cmd.sidemove < 0 then
                cmd.yaw = cmd.yaw + 30
            end
        end
    end
end

avoid_backstab = function(cmd)
    if not entity.get_local_player() or not entity.is_alive(entity.get_local_player()) then return end
    if ishmael.menu.aa.features:get("antibackstab") then
        local players = entity.get_players(true)
        for _, player in ipairs(players) do
            local distance = vector(entity.get_origin(entity.get_local_player())):dist(vector(entity.get_origin(player)))
            if entity.get_classname(entity.get_player_weapon(player)) == "CKnife" and distance <= 280 then
                ui.set(ishmael.refer.yaw[2],180)
                ui.set(ishmael.refer.aa.pitch[1],"off")
            end
        end
    end
end

local ground_ticks = 0
local air_ticks = 0 -- Track time in the air
local last_stance = "in ?" -- Persist the last valid stance

stance_setup = function(cmd)
    local me = entity.get_local_player()
    if not me then return end
    
    local flags = entity.get_prop(me, "m_fFlags")
    local velocity = vector(entity.get_prop(me, "m_vecVelocity"))
    local speed = math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y)
    
    -- Update ground_ticks and air_ticks
    if flags == 257 or flags == 263 or flags == 261 then
        ground_ticks = ground_ticks + 1
        air_ticks = 0
    else
        ground_ticks = 0
        air_ticks = air_ticks + 1
    end

    -- Determine stance
    local stance = "in ?"

    if air_ticks > 0 and ground_ticks < 10 then
        -- Prioritize jumping states
        if flags == 256 then
            stance = "in jump"
        elseif flags == 262 then
            stance = "in jump duck"
        end
    elseif ground_ticks >= 10 then
        -- Ground-based stances
        if flags == 257 and speed < 2 then
            stance = "in stand"
        elseif flags == 257 and speed > 2 then
            stance = "in run"
        elseif flags == 263 and speed < 2 then
            stance = "in duck"
        elseif flags == 263 and speed > 2 then
            stance = "in duck run"
        elseif flags == 261 then
            stance = "in duck"
        end
    end

    -- Fallback to last stance to prevent rapid state changes
    if stance == "in ?" then
        stance = last_stance
    else
        last_stance = stance
    end

    return stance
end



freestanding_setup = function(cmd)
    if ishmael.menu.aa.disablers:get(stance_setup()) then return end 
    if ishmael.menu.aa.features:get("fs") and ishmael.menu.aa.disablers:get_hotkey() then
        ui.set(ishmael.refer.aa.freestand[1],true)
        ui.set(ishmael.refer.aa.freestand[2],"always on")
        ui.set(ishmael.refer.aa.body_yaw[1],"opposite")
        ui.set_visible(ishmael.refer.aa.freestanding_body_yaw[1],false)
    else
        ui.set(ishmael.refer.aa.freestand[1],false)
        ui.set(ishmael.refer.aa.freestand[2],"on hotkey")
    end
end

local get_name = panorama.loadstring([[ return MyPersonaAPI.GetName() ]])


watermark_render = function()
    if not ishmael.menu.vis.watermark:get() then return end
    local h, m, s, mst = client.system_time()

    -- Convert 24-hour time to 12-hour format
    local am_pm = "am"
    if h >= 12 then
        am_pm = "pm"
    end
    h = h % 12
    if h == 0 then
        h = 12
    end

    local actual_time = ('%2d:%02d'):format(h, m)

    local nickname = tostring(get_name())

    local r, g, b = 180, 180, 255

    local latency = client.latency() * 1000
    local latency_text = ('%d'):format(latency) or ''
    --b4b4ffff blue
    --ffffffff white
    local text = string.upper(ishmael.funcs.white.."ishmael."..ishmael.funcs.blue.."lol "..ishmael.funcs.white..nickname.." "..ishmael.funcs.blue..latency_text..ishmael.funcs.white.."ms "..ishmael.funcs.blue..actual_time..ishmael.funcs.white..am_pm)


    local h, w = 18, renderer.measure_text(nil, text) + 8
    local x, y = client.screen_size(), 10 + (-3)

    x = x - w - 10
    --print(ishmael.menu.vis.watermark_options:get())
    if ishmael.menu.vis.watermark_options:get() == "small" then
        renderer.text(x + 117, y + 1, 255, 255, 255, 255, '-c', 0, text)
    else
        renderer.text(x + 100, y + 1, 255, 255, 255, 255, 'c', 0, string.lower(text))     
    end
end

indicators_render = function()
    local ss = {client.screen_size()}
    local me = entity.get_local_player()
    if not me then return end
    if not entity.is_alive(me) then return end
    if ishmael.menu.vis.inds:get() == "default" then
        local dt_alpha = anim.new("doublelerp"):update(anim.types.LERP,ui.get(ishmael.refer.other.dt[2]) and 255 or 0)
        local dt_color = anim.new("triplelerp"):update(anim.types.LERP,anti_aim.get_double_tap() and 180 or 255)
        local os_pos = anim.new("onshotx"):update(anim.types.LERP,ui.get(ishmael.refer.other.dt[2]) and ui.get(ishmael.refer.other.os[2]) and 11 or 1)
        local os_alpha = anim.new("onshotalpha"):update(anim.types.LERP,ui.get(ishmael.refer.other.os[2]) and 255 or 0)
        local fs_alpha = anim.new("fsalpha"):update(anim.types.LERP,ui.get(ishmael.refer.aa.freestand[2]) and 255 or 0)
        local fs_pos = anim.new("fsx"):update(anim.types.LERP,ui.get(ishmael.refer.other.dt[2]) and ui.get(ishmael.refer.other.os[2]) and 22 or (ui.get(ishmael.refer.other.os[2]) and not ui.get(ishmael.refer.other.dt[2])) and 11 or (ui.get(ishmael.refer.other.dt[2]) and not ui.get(ishmael.refer.other.os[2])) and 11 or 1) -- legend
        if ishmael.funcs.round(globals.curtime()%1,1) <= 0.5 then
            renderer.text(ss[1]/2+1,ss[2]/2+10,255,255,255,255,"-",0,string.upper(ishmael.funcs.blue.."i"..ishmael.funcs.white.."S"..ishmael.funcs.blue.."h"..ishmael.funcs.white.."M"..ishmael.funcs.blue.."a"..ishmael.funcs.white.."E"..ishmael.funcs.blue.."l"..ishmael.funcs.white.."."..ishmael.funcs.white.."L"..ishmael.funcs.blue.."o"..ishmael.funcs.white.."L"))
        else
            renderer.text(ss[1]/2+1,ss[2]/2+10,255,255,255,255,"-",0,string.upper(ishmael.funcs.white.."i"..ishmael.funcs.blue.."S"..ishmael.funcs.white.."h"..ishmael.funcs.blue.."M"..ishmael.funcs.white.."a"..ishmael.funcs.blue.."E"..ishmael.funcs.white.."l"..ishmael.funcs.blue.."."..ishmael.funcs.blue.."L"..ishmael.funcs.white.."o"..ishmael.funcs.blue.."L"))
        end
        renderer.text(ss[1]/2+1,ss[2]/2+18,255,255,255,255,"-",0,"STANCE: "..ishmael.funcs.blue..string.upper(string.sub(stance_setup(),4,4)))
        renderer.text(ss[1]/2+1,ss[2]/2+26,dt_color,dt_color,255,dt_alpha,"-",0,"DT")
        renderer.text(ss[1]/2+os_pos,ss[2]/2+26,255,255,255,os_alpha,"-",0,"OS")
        renderer.text(ss[1]/2+fs_pos,ss[2]/2+26,255,255,255,fs_alpha,"-",0,"FS")
    elseif ishmael.menu.vis.inds:get() == "gogi" then
        -- C1B8DEFF - purp
        -- BDB7FFFF - blue
        local e_pose_param = math.min(57, entity.get_prop(me, "m_flPoseParameter", 11)*120-60)
        local text_width,text_height = renderer.measure_text("cb", "ishmael.lol")
        local ind_width, ind_height = renderer.measure_text("c-",string.upper(string.sub(stance_setup(),4,string.len(stance_setup()))))
        local scrx, scry = client.screen_size()
        local x, y = scrx / 2, scry / 2
        renderer.text(x + ind_width/64 - 2, y + 46, 255,255,255,255, "c-", nil, string.upper(string.sub(stance_setup(),4,string.len(stance_setup()))))
        if e_pose_param > 0 then
            renderer.text(x - (text_width / 4) + 10, y + 35, 180,180,255,255, "cb", nil, "ishmael")
            renderer.text(x + (text_width / 4) + 10, y + 35, 193,184,222,255, "cb", nil, ".lol")
        else
            renderer.text(x - (text_width / 4) + 10, y + 35, 193,184,222,255, "cb", nil, "ishmael")
            renderer.text(x + (text_width / 4) + 10, y + 35, 180,180,255,255, "cb", nil, ".lol")
        end
    end
end

animfix_setup = function()
    local me = entity.get_local_player()
    if not me then return end
    if not ishmael.menu.misc.anims:get() then return end
    local air = (stance_setup() == "in jump" or stance_setup() == "in jump duck") and ground_ticks < 10
    if globals.chokedcommands() > 1 and air then
        entity.set_prop(me,"m_flPoseParameter",client.random_float(0,1),6)
        entity.set_prop(me,"m_flPoseParameter",client.random_float(0,1),9)
    end
end

defensive_setup = function(player)
    local tickcount = globals.tickcount()
    local sim_time = toticks(entity.get_prop(player, "m_flSimulationTime"))
    local sim_diff = sim_time - last_sim_time

    if sim_diff < 0 then
        defensive_until = tickcount + math.abs(sim_diff) - toticks(client.latency())
    end
    
    last_sim_time = sim_time

    return defensive_until > tickcount
end

local swap, dticks, upd, upd_stance = false, 1, "default", "unknown"

antiaim_setup = function()
    local me = entity.get_local_player()
    if not me then return end
    if globals.tickcount() % (dticks * 2) == 0 then
        swap = not swap
    end
    side = entity.get_prop(me, 'm_flPoseParameter', 11) * 120 - 60 > 0
    ui.set(ishmael.refer.aa.pitch[1],"minimal")
    ui.set(ishmael.refer.aa.enabled[1],true)
    ui.set(ishmael.refer.aa.yaw_base[1],"at targets")
    ui.set(ishmael.refer.aa.yaw[1],"180")
    ui.set(ishmael.refer.aa.yaw_jitter[1],"off")
    ui.set(ishmael.refer.aa.yaw_jitter[2],0)
    ui.set(ishmael.refer.aa.body_yaw[1],"static")
    ui.set(ishmael.refer.aa.body_yaw[2],swap and -1 or 1)
    ui.set(ishmael.refer.aa.roll[1],0)
    ui.set(ishmael.refer.aa.edge_yaw[1],false)
    if ishmael.menu.aa.preset:get() == "acabo" then
        dticks = 2
        if stance_setup() == "in stand" then
            ui.set(ishmael.refer.aa.yaw[2],side and -24 or 46)
        elseif stance_setup() == "in run" then
            ui.set(ishmael.refer.aa.yaw[2],side and math.random(-30,-24) or 36)
        elseif stance_setup() == "in duck" then
            ui.set(ishmael.refer.aa.yaw[2],side and -24 or 23)
        elseif stance_setup() == "in duck run" then
            ui.set(ishmael.refer.aa.yaw[2],side and -32 or 48)
        elseif stance_setup() == "in jump" then
            ui.set(ishmael.refer.aa.yaw[2],side and -18 or 24)
        elseif stance_setup() == "in jump duck" then
            ui.set(ishmael.refer.aa.yaw[2],side and -29 or 51)
        end
    elseif ishmael.menu.aa.preset:get() == "dynamic" then
        if stance_setup() == "in stand" then
            ui.set(ishmael.refer.aa.yaw[2],side and -20 or 27)
            dticks = 1
        elseif stance_setup() == "in run" then
            ui.set(ishmael.refer.aa.yaw[2],side and -29 or 53)
            dticks = 1
        elseif stance_setup() == "in duck" then
            ui.set(ishmael.refer.aa.yaw[2],side and -22 or 42)
            dticks = 1
        elseif stance_setup() == "in duck run" then
            ui.set(ishmael.refer.aa.yaw[2],side and math.random(-31,-29) or 35)
            dticks = 2
        elseif stance_setup() == "in jump" then
            ui.set(ishmael.refer.aa.yaw[2],side and -24 or 43)
            dticks = 3
        elseif stance_setup() == "in jump duck" then
            ui.set(ishmael.refer.aa.yaw[2],side and -27 or 48)
            dticks = 2
        end
        if ishmael.menu.aa.dynamicupdate:get("risk assessment") then
            idx = client.current_threat()
            if idx == nil then return end
            if idx then
                    local ho_x, ho_y, ho_z = entity.hitbox_position(me, 0) -- head
                    local rao_x, rao_y, rao_z = entity.hitbox_position(me, 16) -- right arm
                    local lao_x, lao_y, lao_z = entity.hitbox_position(me, 18) -- left arm
                    local so_x, so_y, so_z = entity.hitbox_position(me, 4) -- stomach
                    local eo_x, eo_y, eo_z = entity.get_origin(idx) -- targ pos
                    
                    head_dmg = {client.trace_bullet(idx, eo_x, eo_y, eo_z, ho_x, ho_y, ho_z, true)}
                    rightarm_dmg = {client.trace_bullet(idx, eo_x, eo_y, eo_z, rao_x, rao_y, rao_z, true)}
                    leftarm_dmg = {client.trace_bullet(idx, eo_x, eo_y, eo_z, lao_x, lao_y, lao_z, true)}
                    stomach_dmg = {client.trace_bullet(idx, eo_x, eo_y, eo_z, so_x, so_y, so_z, true)}
            end
            if stance_setup() == "in jump" and head_dmg[2] > stomach_dmg[2] and head_dmg[2] > leftarm_dmg[2] and head_dmg[2] > rightarm_dmg[2] then
                ui.set(ishmael.refer.aa.yaw[2],side and -18 or 36)
                dticks = 2
                upd = "head_high"
                upd_stance = "jump"
            elseif stance_setup() == "in jump" and head_dmg[2] < 31 and stomach_dmg[2] > 29 then
                ui.set(ishmael.refer.aa.yaw[2],side and -35 or 43)
                dticks = 3
                upd = "body_priority"
                upd_stance = "jump"
            elseif stance_setup() == "in jump" and head_dmg[2] < 29 and stomach_dmg[2] < 29 and rightarm_dmg[2] > 30 then
                ui.set(ishmael.refer.aa.yaw[2],side and -25 or 21)
                dticks = 1
                upd = "right"
                upd_stance = "jump"
            elseif stance_setup() == "in jump" and head_dmg[2] < 29 and stomach_dmg[2] < 29 and rightarm_dmg[2] < 29 and leftarm_dmg[2] > 30 then
                ui.set(ishmael.refer.aa.yaw[2],side and -19 or 39)
                dticks = 1
                upd = "left"
                upd_stance = "jump"
            elseif stance_setup() == "in jump" and head_dmg[2] < 31 and head_dmg[2] > 1 then
                ui.set(ishmael.refer.aa.yaw[2],side and -27 or 27)
                dticks = 4
                upd = "head_moderate"
                upd_stance = "jump"
            elseif stance_setup() == "in jump duck" and head_dmg[2] > leftarm_dmg[2] + rightarm_dmg[2] then
                ui.set(ishmael.refer.aa.yaw[2],side and -29 or 49)
                dticks = 3
                upd = "head_priority"
                upd_stance = "jump_duck"
            elseif stance_setup() == "in jump duck" and head_dmg[2] > 32 and stomach_dmg[2] < head_dmg[2] then
                ui.set(ishmael.refer.aa.yaw[2],side and -26 or 47)
                dticks = 2
                upd = "head_high"
                upd_stance = "jump_duck"
            elseif stance_setup() == "in jump duck" and leftarm_dmg[2] > 30 and rightarm_dmg[2] < 29 then
                ui.set(ishmael.refer.aa.yaw[2],side and -19 or 42)
                dticks = 1
                upd = "left"
                upd_stance = "jump_duck"
            elseif stance_setup() == "in jump duck" and leftarm_dmg[2] < 29 and rightarm_dmg[2] > 30 then
                ui.set(ishmael.refer.aa.yaw[2],side and -42 or 21)
                dticks = 1
                upd = "right"
                upd_stance = "jump_duck"
            elseif stance_setup() == "in jump duck" and stomach_dmg[2] > leftarm_dmg[2] and stomach_dmg[2] > rightarm_dmg[2] and stomach_dmg[2] > head_dmg[2] then
                ui.set(ishmael.refer.aa.yaw[2],side and -31 or 50)
                dticks = 2
                upd = "body_priority"
                upd_stance = "jump_duck"
            elseif stance_setup() == "in run" and head_dmg[2] > leftarm_dmg[2] and head_dmg[2] > rightarm_dmg[2] and head_dmg[2] > stomach_dmg[2] then
                ui.set(ishmael.refer.aa.yaw[2],side and -26 or 47)
                dticks = 2
                upd = "head_high"
                upd_stance = "run"
            elseif stance_setup() == "in run" and stomach_dmg[2] > 31 and head_dmg[2] < 31 then
                ui.set(ishmael.refer.aa.yaw[2],side and -21 or 49)
                dticks = 1
                upd = "body_priority"
                upd_stance = "run"     
            elseif stance_setup() == "in run" and leftarm_dmg[2] > 31 and rightarm_dmg[2] < 29 then
                ui.set(ishmael.refer.aa.yaw[2],side and -21 or 46)
                dticks = 2
                upd = "left"
                upd_stance = "run"
            elseif stance_setup() == "in run" and leftarm_dmg[2] < 29 and rightarm_dmg[2] > 31 then
                ui.set(ishmael.refer.aa.yaw[2],side and -46 or 21)
                dticks = 2
                upd = "right"
                upd_stance = "run"
            end
        end
    end
end

debug_render = function()
    local ss = {client.screen_size()}
    if not ishmael.menu.vis.debug:get() then return end
    local me = entity.get_local_player()
    if not me then return end
    if not entity.is_alive(me) then return end
    if idx then
        renderer.text(ss[1]/2-265,ss[2]/2-150,255,255,255,200,"",0,"last_risk: "..ishmael.funcs.blue..tostring(upd)..ishmael.funcs.skeet.." -> "..upd_stance.." -> "..dticks)         
        renderer.text(ss[1]/2-265,ss[2]/2-140,255,255,255,200,"",0,"cur_fando: "..ishmael.funcs.blue..tostring(entity.get_player_name(idx)))   
        renderer.text(ss[1]/2-265,ss[2]/2-130,255,255,255,200,"",0,"idx: "..ishmael.funcs.blue..tostring(entity.get_local_player())..ishmael.funcs.skeet.." -> "..idx)
       -- renderer.text(ss[1]/2-265,ss[2]/2-120,255,255,255,200,"",0,"head_damage: "..ishmael.funcs.blue..tostring(head_dmg[2])..ishmael.funcs.skeet.." -> "..entity.get_player_name(idx))
       -- renderer.text(ss[1]/2-265,ss[2]/2-110,255,255,255,200,"",0,"right_arm_damage: "..ishmael.funcs.blue..tostring(rightarm_dmg[2])..ishmael.funcs.skeet.." -> "..entity.get_player_name(idx))
        --renderer.text(ss[1]/2-265,ss[2]/2-100,255,255,255,200,"",0,"left_arm_damage: "..ishmael.funcs.blue..tostring(leftarm_dmg[2])..ishmael.funcs.skeet.." -> "..entity.get_player_name(idx))
        --renderer.text(ss[1]/2-265,ss[2]/2-90,255,255,255,200,"",0,"stomach_damage: "..ishmael.funcs.blue..tostring(stomach_dmg[2])..ishmael.funcs.skeet.." -> "..entity.get_player_name(idx))
        local dmginterp = anim.new("dmgint"):update(anim.types.LERP,math.floor(ishmael.funcs.total_damage(head_dmg[2],rightarm_dmg[2],leftarm_dmg[2],stomach_dmg[2])))
        renderer.text(ss[1]/2-265,ss[2]/2-120,255,255,255,200,"",0,"total_risk: "..ishmael.funcs.blue..dmginterp.."%")
    end

end

client.set_event_callback("player_death",function(e)
    local me = entity.get_local_player()
    if not me then return end
    if e.userid == me then return end
    if not e.attacker ~= me then return end
    if not ishmael.menu.misc.killsay:get() then return end
    client.delay_call(client.random_int(1,3),function()
        client.exec("say 1")
    end)
end)

client.set_event_callback("paint",function()
    watermark_render()
    indicators_render()
    debug_render()
end)

client.set_event_callback("setup_command",function(cmd)
    fast_ladder(cmd)
    avoid_backstab(cmd)
    stance_setup(cmd)
    freestanding_setup(cmd)
    antiaim_setup(cmd)
end)

client.set_event_callback("pre_render",function()
    animfix_setup()
end)

client.set_event_callback("shutdown",function()
    ishmael.funcs.display_menu(true)
end)