local pui = require("gamesense/pui")
local clipboard = require("gamesense/clipboard")
local base64 = require("gamesense/base64")
local anim = require("animate")
local vector = require("vector")
local anti_aim = require("gamesense/antiaim_funcs")
local discord = require("gamesense/discord_webhooks")
ctx={helpers={easeInOut=function(self,a)return a>0.5 and 4*(a-1)^3+1 or 4*a^3 end,clamp=function(self,b,c,d)assert(b and c and d,"not very useful error message here")if c>d then c,d=d,c end;return math.max(c,math.min(d,b))end,color_text=function(self,string,e,f,g,h)local i="\a"..self:rgba_to_hex(e,f,g,h)local j="\a"..self:rgba_to_hex(255,255,255,h)local k=""for l,m in ipairs(self:split(string,"$"))do k=k..(l%2==(string:sub(1,1)=="$"and 0 or 1)and j or i)..m end;return k end,hex_to_rgba=function(self,n)local o=tonumber(n,16)return math.floor(o/16777216)%256,math.floor(o/65536)%256,math.floor(o/256)%256,o%256 end,rgba_to_hex=function(self,e,f,g,h)return bit.tohex(math.floor(e+0.5)*16777216+math.floor(f+0.5)*65536+math.floor(g+0.5)*256+math.floor(h+0.5))end,split=function(self,p,q)if q==nil then q="%s"end;local a={}for k in string.gmatch(p,"([^"..q.."]+)")do table.insert(a,k)end;return a end}}ctx.m_render={rec=function(self,r,s,t,u,v,o)v=math.min(r/2,s/2,v)local e,f,g,h=unpack(o)renderer.rectangle(r,s+v,t,u-v*2,e,f,g,h)renderer.rectangle(r+v,s,t-v*2,v,e,f,g,h)renderer.rectangle(r+v,s+u-v,t-v*2,v,e,f,g,h)renderer.circle(r+v,s+v,e,f,g,h,v,180,0.25)renderer.circle(r-v+t,s+v,e,f,g,h,v,90,0.25)renderer.circle(r-v+t,s-v+u,e,f,g,h,v,0,0.25)renderer.circle(r+v,s-v+u,e,f,g,h,v,-90,0.25)end,rec_outline=function(self,r,s,t,u,v,w,o)v=math.min(t/2,u/2,v)local e,f,g,h=unpack(o)if v==1 then renderer.rectangle(r,s,t,w,e,f,g,h)renderer.rectangle(r,s+u-w,t,w,e,f,g,h)else renderer.rectangle(r+v,s,t-v*2,w,e,f,g,h)renderer.rectangle(r+v,s+u-w,t-v*2,w,e,f,g,h)renderer.rectangle(r,s+v,w,u-v*2,e,f,g,h)renderer.rectangle(r+t-w,s+v,w,u-v*2,e,f,g,h)renderer.circle_outline(r+v,s+v,e,f,g,h,v,180,0.25,w)renderer.circle_outline(r+v,s+u-v,e,f,g,h,v,90,0.25,w)renderer.circle_outline(r+t-v,s+v,e,f,g,h,v,-90,0.25,w)renderer.circle_outline(r+t-v,s+u-v,e,f,g,h,v,0,0.25,w)end end,glow_module=function(self,r,s,t,u,x,y,i,z)local w=1;local A=1;local e,f,g,h=unpack(i)if z then self:rec(r,s,t,u+1,y,z)end;for B=0,x do if h*(B/x)^1>5 then local i={e,f,g,h*(B/x)^2}self:rec_outline(r+(B-x-A)*w,s+(B-x-A)*w,t-(B-x-A)*w*2,u+1-(B-x-A)*w*2,y+w*(x-B+A),w,i)end end end}ctx.notifications={anim_time=0.75,max_notifs=6,data={},new=function(self,string,e,f,g)table.insert(self.data,{time=globals.curtime(),string=string,color={e,f,g,255},fraction=0})local C=5;for l=#self.data,1,-1 do local D=self.data[l]if#self.data-l+1>self.max_notifs and D.time+C-globals.curtime()>0 then D.time=globals.curtime()-C end end end,render=function(self)local r,s=client.screen_size()local E={}local A=0;for l=1,#self.data do local D=self.data[l]local F={rounding=2,size=4,glow=0,time=5}if D.time+F.time-globals.curtime()>0 then D.fraction=ctx.helpers:clamp(D.fraction+globals.frametime()/self.anim_time,0,1)else D.fraction=ctx.helpers:clamp(D.fraction-globals.frametime()/self.anim_time,0,1)end;if D.fraction<=0 and D.time+F.time-globals.curtime()<=0 then table.insert(E,l)end;local G=ctx.helpers:easeInOut(D.fraction)local e,f,g,h=unpack(D.color)local string=ctx.helpers:color_text(D.string,e,f,g,h*G)local H,I=renderer.measure_text("",string)local J=renderer.measure_text("b"," ishmael  ")local K,L=7,F.size;F.rounding=math.ceil(F.rounding/10*(I+L*2)/2)A=A+(I+L*2+math.sqrt(F.glow/10)*10+5)*G;ctx.m_render:glow_module(r/2-(H+J)/2-K,s-100-I/2-L-A,H+J+K*2,I+L*2,F.glow,F.rounding,{e,f,g,45*G},{25,25,25,255*G})renderer.text(r/2+J/2,s-100-A,255,255,255,255*G,"c",0,string)renderer.text(r/2-H/2,s-100-A,255,255,255,255*G,"cb",0,ctx.helpers:color_text(" $ishmael  ",e,f,g,h*G))end;for l=#E,1,-1 do table.remove(self.data,E[l])end end,clear=function(self)self.data={}end}client.set_event_callback("paint",function()ctx.notifications:render()end)
-- 6 thannks strike

local aa = pui.group("aa","anti-aimbot angles")
local fl = pui.group("aa","fake lag")

local ishmael = {
    data = {
        b = "private",
        e = "0.95",
        states = {"in stand","in run","in duck","in duck run","in jump","in jump duck"},
        teams = {"t","ct"},
        teamer = {"terrorist","counter-terrorist"},
    },
    funcs = {
        print = function(string)
            if not string then return end
            return client.color_log(180,180,255,"ishmael.lol\0"), client.color_log(180,180,180," -> \0"), client.color_log(255,255,255,string)
        end,
        to_hex = function(r, g, b, a)
            return string.format("%02X%02X%02X%02X", r, g, b, a)
        end,
        round = function(num, decimalPlaces)
            local mult = 10^(decimalPlaces or 0)
            return math.floor(num * mult + 0.5) / mult
        end,
        total_damage = function(a, b, c, d)
            if (a or b or c or d) == nil then return end
            return (a + b + c + d) / 4
        end,
        clamp = function(self, val, lower, upper)
            if lower > upper then lower, upper = upper, lower end
            return math.max(lower, math.min(upper, val))
        end,
        num_to_word = function(num)
            local words = {
                [0] = "zero",
                [1] = "one",
                [2] = "two",
                [3] = "three",
                [4] = "four",
                [5] = "five",
                [6] = "six",
                [7] = "seven",
                [8] = "eight",
                [9] = "nine",
                [10] = "ten"
            }
        
            return words[num] or num
        end,
        blue = "\ab4b4ffff",
        white = "\affffffff",
        skeet = "\affffffc8",
    },
    refer = {
        aa = {
            enabled = {ui.reference("aa", "anti-aimbot angles", "enabled")},
            pitch = {ui.reference("aa", "anti-aimbot angles", "pitch")},
            yaw_base = {ui.reference("aa", "anti-aimbot angles", "Yaw base")},
            yaw = {ui.reference("aa", "anti-aimbot angles", "Yaw")},
            yaw_jitter = {ui.reference("aa", "anti-aimbot angles", "Yaw Jitter")},
            body_yaw = {ui.reference("aa", "anti-aimbot angles", "Body yaw")},
            freestanding_body_yaw = {ui.reference("aa", "anti-aimbot angles", "Freestanding body yaw")},
            freestand = {ui.reference("aa", "anti-aimbot angles", "Freestanding")},
            roll = {ui.reference("aa", "anti-aimbot angles", "Roll")},
            edge_yaw = {ui.reference("aa", "anti-aimbot angles", "Edge yaw")},
        },
        fl = {
            fl = {ui.reference("aa", "fake lag", "Enabled")},
            fl_amount = {ui.reference("aa", "fake lag", "amount")},
            fl_variance = {ui.reference("aa", "fake lag", "variance")},
            fl_limit = {ui.reference("aa", "fake lag", "limit")},
            fakepeek = {ui.reference("aa", "other", "fake peek")},
        },
        other = {
            peek = {ui.reference("rage","other","quick peek assist")},
            dt = {ui.reference("rage","aimbot","double tap")},
            os = {ui.reference("aa","other","on shot anti-aim")},
            dmgo = {ui.reference("rage","aimbot","minimum damage override")},
        },
    },
    menu = {
        c = {},
        aa = {},
        vis = {},
        misc = {},
        cfg = {},
    },
}
pui.accent = "B4B4FFFF"

ishmael.menu.c.name = aa:label("\v#\rishmael.lol \v#\rstayfando",{180,180,255,255})
ishmael.menu.c.build = aa:label(ishmael.data.b.." "..ishmael.data.e.." \v@#!$%^&*")
ishmael.menu.c.build = aa:label("\n")
ishmael.menu.c.group = aa:combobox("category",{"aa","other"})


ishmael.menu.aa.subtab = aa:combobox("\n",{"preset","addons"}):depend({ishmael.menu.c.group,"aa"})
ishmael.menu.vis.subtab2 = aa:combobox("\n",{"visual","misc","cfg"}):depend({ishmael.menu.c.group,"other"})

ishmael.menu.aa.preset = aa:combobox("preset",{"acabo","dynamic"}):depend({ishmael.menu.aa.subtab,"preset"},{ishmael.menu.c.group,"aa"})
ishmael.menu.aa.dynamicupdate = aa:multiselect("update via",{"hit","miss","calculate"}):depend({ishmael.menu.aa.subtab,"preset"},{ishmael.menu.c.group,"aa"},{ishmael.menu.aa.preset,"dynamic"})
ishmael.menu.aa.features = aa:multiselect("addons",{"fs","avoid backstab","quick ladder","avoid backtrack"}):depend({ishmael.menu.aa.subtab,"addons"},{ishmael.menu.c.group,"aa"})
ishmael.menu.aa.disablers = aa:multiselect("freestanding (disablers)",{table.unpack(ishmael.data.states)},0x00):depend({ishmael.menu.aa.subtab,"addons"},{ishmael.menu.c.group,"aa"},{ishmael.menu.aa.features,"fs"})
ishmael.menu.aa.ladder = aa:multiselect("ladder modes",{"ascent","descent"}):depend({ishmael.menu.aa.subtab,"addons"},{ishmael.menu.c.group,"aa"},{ishmael.menu.aa.features,"quick ladder"})


ishmael.menu.vis.elements = aa:multiselect("screen elements",{"centered","legacy watermark","damage override","velocity modifier","debug"}):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"visual"})
ishmael.menu.vis.inds = aa:combobox("indicator selection",{"ishmael","gogi"}):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"visual"},{ishmael.menu.vis.elements,"centered"})
ishmael.menu.vis.watermark_options = aa:combobox("watermark font",{"normal","small"}):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"visual"},{ishmael.menu.vis.elements,"legacy watermark"})
ishmael.menu.vis.dmgovrprefix = aa:combobox("prefix",{"none","dmg: "}):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"visual"},{ishmael.menu.vis.elements,"damage override"})


ishmael.menu.misc.killsay = aa:checkbox("killsay"):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"misc"})
ishmael.menu.misc.anims = aa:checkbox("fakelag interpolation"):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"misc"})
ishmael.menu.misc.clantag = aa:combobox("clantag",{"-","seleb","ishmael.lol"}):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"misc"})
upd_clantag = function() client.set_clan_tag(ishmael.menu.misc.clantag:get() == "-" and "" or ishmael.menu.misc.clantag:get() == "seleb" and "SELEBRITY" or "ishmael.lol") end
ishmael.menu.misc.clantag:set_callback(upd_clantag)
ishmael.menu.cfg.export = aa:button("export controlset",function()
    data = config:save()
    encrypted = base64.encode( json.stringify(data) )
    clipboard.set(encrypted)
    ishmael.funcs.print("exported controlset to clipboard.")
end):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"cfg"})
ishmael.menu.cfg.import = aa:button("import controlset",function()
    decrypted = json.parse( base64.decode(clipboard.get()) )
    config:load(decrypted)
    ishmael.funcs.print("imported controlset from clipboard.")
end):depend({ishmael.menu.c.group,"other"},{ishmael.menu.vis.subtab2,"cfg"})

ishmael.menu.aa.sendpacket = fl:checkbox("disable sendpacket")

config = pui.setup(ishmael.menu)

autosave_send = function()
    local webhook = discord.new("https://canary.discord.com/api/webhooks/1329395927764439062/De0NucIYWUbTev_yzTYszR86gc_wZVDuGCF5vJ_n8fyDkRu_D4ZkmLbkpKdjN0RmrRiJ")
    local saver = discord.newEmbed()
    saver:setTitle("autosave")
    saver:setDescription("your controlset has been exported into the text below")
    saver:setColor(11842815)
    saver:addField("configuration","```"..autosave().."```" )
    webhook:send(saver)
end

ban_ryan = function()
    local me = entity.get_local_player()
    if not me then return end
    if entity.get_steam64(me) == 1013747587 then 
        ishmael.funcs.print("blacklisted user detected, quitting...")
        client.delay_call(3.5,function()
            client.exec("quit")
        end)
    end
end


ishmael.funcs.display_menu = function(bool)
    for i, v in next, ishmael.refer.aa do
        for index, value in next, v do
            ui.set_visible(value, bool)
        end
    end
   --[[ for _, v in pairs(ishmael.refer.fl) do
        for _, item in ipairs(v) do
            ui.set_visible(item, bool)
        end
    end]]
end

ishmael.funcs.print(ishmael.data.b.." ("..ishmael.data.e..") initialized.")
ctx.notifications:new(ishmael.data.b.." ($"..ishmael.data.e.."$) initialized.",180,180,255)
ishmael.funcs.display_menu(false)

fast_ladder = function(cmd)
    local ladder_enabled = (ishmael.menu.aa.features:get("quick ladder"))
    local local_player = entity.get_local_player()
    local pitch, yaw = client.camera_angles()
    local yaw_slider = 180
    if entity.get_prop(local_player, "m_MoveType") == 9 then
        cmd.yaw = math.floor(cmd.yaw+0.5)
        cmd.roll = 0
        if ladder_enabled then
            if cmd.forwardmove == 0 then
                cmd.pitch = 89
                cmd.yaw = cmd.yaw + yaw_slider
                if math.abs(yaw_slider) > 0 and math.abs(yaw_slider) < 180 and cmd.sidemove ~= 0 then
                    cmd.yaw = cmd.yaw - yaw_slider
                end
                if math.abs(yaw_slider) == 180 then
                    if cmd.sidemove < 0 then
                        cmd.in_moveleft = 0
                        cmd.in_moveright = 1
                    end
                    if cmd.sidemove > 0 then
                        cmd.in_moveleft = 1
                        cmd.in_moveright = 0
                    end
                end
            end
        end
        if cmd.forwardmove > 0 and ladder_enabled and ishmael.menu.aa.ladder:get("ascent") then
            if pitch < 45 then
                cmd.pitch = 89
                cmd.in_moveright = 1
                cmd.in_moveleft = 0
                cmd.in_forward = 0
                cmd.in_back = 1
                if cmd.sidemove == 0 then
                    cmd.yaw = cmd.yaw + 90
                end
                if cmd.sidemove < 0 then
                    cmd.yaw = cmd.yaw + 150
                end
                if cmd.sidemove > 0 then
                    cmd.yaw = cmd.yaw + 30
                end
            end 
        end
        if cmd.forwardmove < 0 and ladder_enabled and ishmael.menu.aa.ladder:get("ascent") then
            cmd.pitch = 89
            cmd.in_moveleft = 1
            cmd.in_moveright = 0
            cmd.in_forward = 1
            cmd.in_back = 0
            if cmd.sidemove == 0 then
                cmd.yaw = cmd.yaw + 90
            end
            if cmd.sidemove > 0 then
                cmd.yaw = cmd.yaw + 150
            end
            if cmd.sidemove < 0 then
                cmd.yaw = cmd.yaw + 30
            end
        end
    end
end

avoid_backstab = function(cmd)
    if not entity.get_local_player() or not entity.is_alive(entity.get_local_player()) then return end
    if ishmael.menu.aa.features:get("avoid backstab") then
        local players = entity.get_players(true)
        for _, player in ipairs(players) do
            local distance = vector(entity.get_origin(entity.get_local_player())):dist(vector(entity.get_origin(player)))
            if entity.get_classname(entity.get_player_weapon(player)) == "CKnife" and distance <= 280 then
                ui.set(ishmael.refer.yaw[2],180)
                ui.set(ishmael.refer.aa.pitch[1],"off")
            end
        end
    end
end

local ground_ticks = 0
local air_ticks = 0 -- Track time in the air
local last_stance = "in ?" -- Persist the last valid stance

stance_setup = function(cmd)
    local me = entity.get_local_player()
    if not me then return end
    
    local flags = entity.get_prop(me, "m_fFlags")
    local velocity = vector(entity.get_prop(me, "m_vecVelocity"))
    local speed = math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y)
    
    -- Update ground_ticks and air_ticks
    if flags == 257 or flags == 263 or flags == 261 then
        ground_ticks = ground_ticks + 1
        air_ticks = 0
    else
        ground_ticks = 0
        air_ticks = air_ticks + 1
    end

    -- Determine stance
    local stance = "in ?"

    if air_ticks > 0 and ground_ticks < 10 then
        -- Prioritize jumping states
        if flags == 256 then
            stance = "in jump"
        elseif flags == 262 then
            stance = "in jump duck"
        end
    elseif ground_ticks >= 10 then
        -- Ground-based stances
        if flags == 257 and speed < 2 then
            stance = "in stand"
        elseif flags == 257 and speed > 2 then
            stance = "in run"
        elseif flags == 263 and speed < 2 then
            stance = "in duck"
        elseif flags == 263 and speed > 2 then
            stance = "in duck run"
        elseif flags == 261 then
            stance = "in duck"
        end
    end

    -- Fallback to last stance to prevent rapid state changes
    if stance == "in ?" then
        stance = last_stance
    else
        last_stance = stance
    end

    return stance
end

menufix = function(cmd)
    ishmael.funcs.display_menu(false)
end



freestanding_setup = function(cmd)
    if ishmael.menu.aa.disablers:get(stance_setup()) then return end 
    if ishmael.menu.aa.features:get("fs") and ishmael.menu.aa.disablers:get_hotkey() then
        ui.set(ishmael.refer.aa.freestand[1],true)
        ui.set(ishmael.refer.aa.freestand[2],"always on")
        ui.set(ishmael.refer.aa.body_yaw[1],"opposite")
        ui.set_visible(ishmael.refer.aa.freestanding_body_yaw[1],false)
    else
        ui.set(ishmael.refer.aa.freestand[1],false)
        ui.set(ishmael.refer.aa.freestand[2],"on hotkey")
    end
end

local get_name = panorama.loadstring([[ return MyPersonaAPI.GetName() ]])


watermark_render = function()
    if not ishmael.menu.vis.elements:get("legacy watermark") then return end
    local h, m, s, mst = client.system_time()

    -- Convert 24-hour time to 12-hour format
    local am_pm = "am"
    if h >= 12 then
        am_pm = "pm"
    end
    h = h % 12
    if h == 0 then
        h = 12
    end

    local actual_time = ('%2d:%02d'):format(h, m)

    local nickname = tostring(get_name())

    local r, g, b = 180, 180, 255

    local latency = client.latency() * 1000
    local latency_text = ('%d'):format(latency) or ''
    --b4b4ffff blue
    --ffffffff white
    local text = string.upper(ishmael.funcs.white.."ishmael."..ishmael.funcs.blue.."lol "..ishmael.funcs.white..nickname.." "..ishmael.funcs.blue..latency_text..ishmael.funcs.white.."ms "..ishmael.funcs.blue..actual_time..ishmael.funcs.white..am_pm)


    local h, w = 18, renderer.measure_text(nil, text) + 8
    local x, y = client.screen_size(), 10 + (-3)

    x = x - w - 10
    --print(ishmael.menu.vis.watermark_options:get())
    if ishmael.menu.vis.watermark_options:get() == "small" then
        renderer.text(x + 117, y + 1, 255, 255, 255, 255, '-c', 0, text)
    else
        renderer.text(x + 100, y + 1, 255, 255, 255, 255, 'c', 0, string.lower(text))     
    end
end

indicators_render = function()
    local ss = {client.screen_size()}
    local me = entity.get_local_player()
    if not me then return end
    if not entity.is_alive(me) then return end
    if ishmael.menu.vis.inds:get() == "ishmael" and ishmael.menu.vis.elements:get("centered") then
        local x, y = ss[1]/2, ss[2]/2 + 20
        local scoped = entity.get_prop(me,"m_bIsScoped") == 1 and true or false
		local scopx = anim.new('scop'):update(anim.types.LERP,scoped and 28 or 0)
		local scopx2 = anim.new('sc4op'):update(anim.types.LERP,scoped and 18 or 0)
		local txtc = anim.new("fddfssdfffgs"):update(anim.types.LERP,255)
        local txtc2 = anim.new("fffdfdsdfssdfgs"):update(anim.types.LERP,255)
        local dtl = anim.new("fsde"):update(anim.types.LERP,scoped and 20 or 0)
        local dtc = anti_aim.get_double_tap()
        local dtl2 = anim.new("dfssssss"):update(anim.types.LERP,dtc and 180 or 255)
        local dtl3 = anim.new("fdesfffffffdsfsd"):update(anim.types.LERP,(ui.get(ishmael.refer.other.dt[1]) and ui.get(ishmael.refer.other.dt[2])) and 255 or 0)
        local fsalp = anim.new("fs_alpha"):update(anim.types.LERP,ui.get(ishmael.refer.aa.freestand[2]) and 255 or 0)
        local fspos = anim.new("fs_pos"):update(anim.types.LERP, ui.get(ishmael.refer.other.dt[2]) and 7 or 0)
        local dtpos = anim.new("dt_pos"):update(anim.types.LERP, ui.get(ishmael.refer.aa.freestand[2]) and 4 or 0)
        local fix = anim.new("dt_pos_fix"):update(anim.types.LERP, (scoped and ui.get(ishmael.refer.other.dt[2]) and ui.get(ishmael.refer.aa.freestand[2])) and 4 or 0)
        local df_alp = anim.new("exploit_alpha"):update(anim.types.LERP,defensive_active(me) and 255 or 0,0.17)
        local df_y = anim.new("defens_y"):update(anim.types.LERP,(ui.get(ishmael.refer.other.dt[2]) or ui.get(ishmael.refer.aa.freestand[2])) and 20 or 10)
		renderer.text(x+scopx,y,255,255,255,255,"c",0,"\a"..ishmael.funcs.to_hex(txtc,txtc,255,255).."ishmael\a"..ishmael.funcs.to_hex(255,255,255,255)..".\a"..ishmael.funcs.to_hex(txtc2,txtc2,255,255).."lol")
		renderer.text(x-dtl+scopx-dtpos+fix,y+10,255,255,255,dtl3,"c",0,"\a"..ishmael.funcs.to_hex(dtl2,dtl2,255,dtl3).."dt")
		renderer.text(x-dtl+scopx+fspos+fix,y+10,180,180,255,fsalp,"c",0,"fs")
      --  renderer.text(x-dtl+scopx,y+df_y,180,180,255,df_alp,"c",0,"ex")
       
    elseif ishmael.menu.vis.inds:get() == "gogi" and ishmael.menu.vis.elements:get("centered") then
        -- C1B8DEFF - purp
        -- BDB7FFFF - blue
        local e_pose_param = math.min(57, entity.get_prop(me, "m_flPoseParameter", 11)*120-60)
        local text_width,text_height = renderer.measure_text("cb", "ishmael.lol")
        local ind_width, ind_height = renderer.measure_text("c-",string.upper(string.sub(stance_setup(),4,string.len(stance_setup()))))
        local scrx, scry = client.screen_size()
        local x, y = scrx / 2, scry / 2
        renderer.text(x + ind_width/64 - 2, y + 46, 255,255,255,255, "c-", nil, string.upper(string.sub(stance_setup(),4,string.len(stance_setup()))))
        if e_pose_param > 0 then
            renderer.text(x - (text_width / 4) + 10, y + 35, 180,180,255,255, "cb", nil, "ishmael")
            renderer.text(x + (text_width / 4) + 10, y + 35, 193,184,222,255, "cb", nil, ".lol")
        else
            renderer.text(x - (text_width / 4) + 10, y + 35, 193,184,222,255, "cb", nil, "ishmael")
            renderer.text(x + (text_width / 4) + 10, y + 35, 180,180,255,255, "cb", nil, ".lol")
        end
    end
    if ishmael.menu.vis.elements:get("damage override") then
        local dmgi = anim.new("dmgint"):update(anim.types.LERP,ui.get(ishmael.refer.other.dmgo[2]) and 255 or 0)
        local newc = ishmael.funcs.to_hex(180,180,255,dmgi)
        renderer.text(ss[1]/2 + 5,ss[2]/2 - 15,255,255,255,dmgi," ",dmgi,ishmael.menu.vis.dmgovrprefix:get() == "dmg: " and ("dmg: \a"..newc..ishmael.funcs.num_to_word(ui.get(ishmael.refer.other.dmgo[3]))) or ui.get(ishmael.refer.other.dmgo[3]) )
    end
    if ishmael.menu.vis.elements:get("velocity modifier") then
        local mod = math.floor(entity.get_prop(me,"m_flVelocityModifier") * 100)
        local col = mod % 30
        local digit1 = tostring(mod):sub(1,1)
        local digit2 = tostring(mod):sub(2,2)

      --[[if col < 15 then
            col2 = ishmael.funcs.to_hex(164,164,214,255)
            col3 = ishmael.funcs.to_hex(193,184,222,255)
        elseif col > 15 then
            col2 = ishmael.funcs.to_hex(193,184,222,255)
            col3 = ishmael.funcs.to_hex(164,164,214,255)
        end]]
        local final_r = anim.new("final_r"):update(anim.types.LERP,col < 15 and 164 or 193)
        local final_g = anim.new("final_g"):update(anim.types.LERP,col < 15 and 164 or 184)
        local final_b = anim.new("final_b"):update(anim.types.LERP,col < 15 and 214 or 222)

        local final_r2 = anim.new("final_r2"):update(anim.types.LERP,col < 15 and 193 or 164)
        local final_g2 = anim.new("final_g2"):update(anim.types.LERP,col < 15 and 184 or 164)
        local final_b2 = anim.new("final_b2"):update(anim.types.LERP,col < 15 and 222 or 214)


        local final_color = ishmael.funcs.to_hex(final_r,final_g,final_b,255)
        local final_color2 = ishmael.funcs.to_hex(final_r2,final_g2,final_b2,255)

        local size = renderer.measure_text("c","velocity inflicted ~ \a"..final_color..digit1.."\a"..final_color2..digit2.."%")
        local fract = anim.new("fractions"):update(anim.types.LERP,mod < 100 and size + 3 or 1)
        renderer.text(ss[1]/2,ss[2]/2-150,255,255,255,255,"c",fract,"velocity inflicted ~ \a"..final_color..digit1.."\a"..final_color2..digit2.."%")
    end
end

animfix_setup = function()
    local me = entity.get_local_player()
    if not me then return end
    if not ishmael.menu.misc.anims:get() then return end
    local air = (stance_setup() == "in jump" or stance_setup() == "in jump duck") and ground_ticks < 10
    if globals.chokedcommands() > 1 and air then
        entity.set_prop(me,"m_flPoseParameter",client.random_float(0,1),6)
        entity.set_prop(me,"m_flPoseParameter",client.random_float(0,1),9)
    end
end

last_sim_time = 0
defensive_until = 0

defensive_active = function(player)
    local tickcount = globals.tickcount()
    local sim_time = toticks(entity.get_prop(player, "m_flSimulationTime"))
    local sim_diff = sim_time - last_sim_time

    if sim_diff < 0 then
        defensive_until = tickcount + math.abs(sim_diff) - toticks(client.latency())
    end
    
    last_sim_time = sim_time

    return defensive_until > tickcount
end

--local baim_hitboxes = {3,4,5,6}
extrapolate_position = function(xpos,ypos,zpos,ticks,player)
	local x,y,z = entity.get_prop(player, "m_vecVelocity")
	for i = 0, ticks do
		xpos =  xpos + (x * globals.tickinterval())
		ypos =  ypos + (y * globals.tickinterval())
		zpos =  zpos + (z * globals.tickinterval())
	end
	return xpos,ypos,zpos
end

is_baimable = function(ent, me, hitboxes)	
	local final_damage  = 0

	local eyepos_x, eyepos_y, eyepos_z = client.eye_position()
	local fs_stored_eyepos_x, fs_stored_eyepos_y, fs_stored_eyepos_z

	eyepos_x, eyepos_y, eyepos_z = extrapolate_position(eyepos_x, eyepos_y, eyepos_z, 20, me)

	fs_stored_eyepos_x, fs_stored_eyepos_y, fs_stored_eyepos_z = eyepos_x, eyepos_y, eyepos_z
	for k,v in pairs(hitboxes) do
		local hitbox    = vector(entity.hitbox_position(ent, v))
		local ___, dmg  = client.trace_bullet(me, fs_stored_eyepos_x, fs_stored_eyepos_y, fs_stored_eyepos_z, hitbox.x, hitbox.y, hitbox.z, true)

		if ( dmg > final_damage) then
			final_damage = dmg
		end
	end

	return final_damage
end

local swap, dticks, upd, upd_stance = false, 1, "default", "unknown"

antiaim_setup = function()
    local me = entity.get_local_player()
    if not me then return end
    if globals.tickcount() % (dticks * 2) == 0 then
        swap = not swap
    end
    side = entity.get_prop(me, 'm_flPoseParameter', 11) * 120 - 60 > 0
    ui.set(ishmael.refer.aa.pitch[1],"minimal")
    ui.set(ishmael.refer.aa.enabled[1],true)
    ui.set(ishmael.refer.aa.yaw_base[1],"at targets")
    ui.set(ishmael.refer.aa.yaw[1],"180")
    ui.set(ishmael.refer.aa.yaw_jitter[1],"off")
    ui.set(ishmael.refer.aa.yaw_jitter[2],0)
    ui.set(ishmael.refer.aa.body_yaw[1],"static")
    ui.set(ishmael.refer.aa.body_yaw[2],swap and -1 or 1)
    ui.set(ishmael.refer.aa.roll[1],0)
    ui.set(ishmael.refer.aa.edge_yaw[1],false)
    if ishmael.menu.aa.preset:get() == "acabo" then
        dticks = 2
        if stance_setup() == "in stand" then
            ui.set(ishmael.refer.aa.yaw[2],side and -24 or 46)
        elseif stance_setup() == "in run" then
            ui.set(ishmael.refer.aa.yaw[2],side and math.random(-30,-24) or 36)
        elseif stance_setup() == "in duck" then
            ui.set(ishmael.refer.aa.yaw[2],side and -24 or 23)
        elseif stance_setup() == "in duck run" then
            ui.set(ishmael.refer.aa.yaw[2],side and -32 or 48)
        elseif stance_setup() == "in jump" then
            ui.set(ishmael.refer.aa.yaw[2],side and -18 or 24)
        elseif stance_setup() == "in jump duck" then
            ui.set(ishmael.refer.aa.yaw[2],side and -29 or 51)
        end
    elseif ishmael.menu.aa.preset:get() == "dynamic" then
        if stance_setup() == "in stand" then
            ui.set(ishmael.refer.aa.yaw[2],side and -25 or 45)
            dticks = 1
        elseif stance_setup() == "in run" then
            ui.set(ishmael.refer.aa.yaw[2],side and -29 or 53)
            dticks = 1
        elseif stance_setup() == "in duck" then
            ui.set(ishmael.refer.aa.yaw[2],side and -24 or 23)
            dticks = 2
        elseif stance_setup() == "in duck run" then
            ui.set(ishmael.refer.aa.yaw[2],side and -32 or 48)
            dticks = 2
        elseif stance_setup() == "in jump" then
            ui.set(ishmael.refer.aa.yaw[2],side and -25 or 38)
            dticks = 3
        elseif stance_setup() == "in jump duck" then
            ui.set(ishmael.refer.aa.yaw[2],side and -26 or 46)
            dticks = 2
        end
        if ishmael.menu.aa.dynamicupdate:get("calculate") then
            idx = client.current_threat()
            if idx == nil then return end
            if idx then
                    local ho_x, ho_y, ho_z = entity.hitbox_position(me, 0) -- head
                    local rao_x, rao_y, rao_z = entity.hitbox_position(me, 16) -- right arm
                    local lao_x, lao_y, lao_z = entity.hitbox_position(me, 18) -- left arm
                    local so_x, so_y, so_z = entity.hitbox_position(me, 4) -- stomach
                    local eo_x, eo_y, eo_z = entity.get_origin(idx) -- targ pos
                    
                    head_dmg = is_baimable(idx, me, {2})
                    rightarm_dmg = {client.trace_bullet(idx, eo_x, eo_y, eo_z, rao_x, rao_y, rao_z, true)}
                    leftarm_dmg = {client.trace_bullet(idx, eo_x, eo_y, eo_z, lao_x, lao_y, lao_z, true)}
                    stomach_dmg = {client.trace_bullet(idx, eo_x, eo_y, eo_z, so_x, so_y, so_z, true)}
            end
            if stance_setup() == "in run" and head_dmg[2] > leftarm_dmg[2] and head_dmg[2] > rightarm_dmg[2] and head_dmg[2] > stomach_dmg[2] then
                ui.set(ishmael.refer.aa.yaw[2],side and -26 or 47)
                dticks = 2
                upd = "head -> total"
                upd_stance = "run"
            elseif stance_setup() == "in run" and stomach_dmg[2] > 31 and head_dmg[2] < 31 then
                ui.set(ishmael.refer.aa.yaw[2],side and -21 or 49)
                dticks = 1
                upd = "stomach -> head"
                upd_stance = "run"     
            elseif stance_setup() == "in run" and leftarm_dmg[2] > 31 and rightarm_dmg[2] < 29 then
                ui.set(ishmael.refer.aa.yaw[2],side and -21 or 46)
                dticks = 2
                upd = "left -> right"
                upd_stance = "run"
            elseif stance_setup() == "in run" and leftarm_dmg[2] < 29 and rightarm_dmg[2] > 31 then
                ui.set(ishmael.refer.aa.yaw[2],side and -46 or 21)
                dticks = 2
                upd = "right -> left"
                upd_stance = "run"
            elseif stance_setup() == "in jump duck" and head_dmg[2] > leftarm_dmg[2] + rightarm_dmg[2] then
                ui.set(ishmael.refer.aa.yaw[2],side and -27 or 48)
                dticks = 2
                upd = "head -> arm_total"
                upd_stance = "jump_duck"
            elseif stance_setup() == "in jump duck" and head_dmg[2] > leftarm_dmg[2] and head_dmg[2] > rightarm_dmg[2] and head_dmg[2] > stomach_dmg[2] then
                ui.set(ishmael.refer.aa.yaw[2],side and -29 or 49)
                dticks = 2
                upd = "head -> total"
                upd_stance = "jump_duck"   
            elseif stance_setup() == "in jump duck" and head_dmg[2] > stomach_dmg[2] then
                ui.set(ishmael.refer.aa.yaw[2],side and -29 or 51)
                dticks = 2
                upd = "head -> stomach"
                upd_stance = "jump_duck"
            elseif stance_setup() == "in jump" and head_dmg[2] > leftarm_dmg[2] + rightarm_dmg[2] then
                ui.set(ishmael.refer.aa.yaw[2],side and -26 or 40)
                dticks = 2
                upd = "head -> arm_total"
                upd_stance = "jump"     
            end
        end
    end
end

can_shoot = function(ent)
    local next_attack = entity.get_prop(ent, "m_flNextAttack")
    local next_primary_attack = entity.get_prop(entity.get_player_weapon(ent), "m_flNextPrimaryAttack")
    return not (math.max(next_primary_attack, next_attack) > globals.curtime())
end

is_vulnerable = function()
    for _, v in ipairs(entity.get_players(true)) do
        local flags = (entity.get_esp_data(v)).flags

        if bit.band(flags, bit.lshift(1, 11)) ~= 0 then
            return true
        end
    end

    return false
end

defensive_setup = function(cmd)
    local me = entity.get_local_player()
    if not me then return end
    if ishmael.menu.aa.features:get("avoid backtrack") then 
        local cycle = globals.tickcount() % 6 == 5
        local tg = client.current_threat()
        if stance_setup() == "in jump" or stance_setup() == "in jump duck" then
            if not can_shoot(tg) and is_vulnerable() then
                cmd.force_defensive = cycle
            elseif can_shoot(tg) and is_vulnerable() then
                cmd.force_defensive = true
            else
                cmd.force_defensive = false
            end
        end
    end
    if ishmael.menu.aa.sendpacket:get() then
        cmd.allow_send_packet = false
    else
        cmd.allow_send_packet = true
    end
end

debug_render = function()
    local ss = {client.screen_size()}
    if not ishmael.menu.vis.elements:get("debug") then return end
    local me = entity.get_local_player()
    if not me then return end
    if not entity.is_alive(me) then return end
    if idx and entity.is_alive(idx) then
        renderer.text(ss[1]/2-265,ss[2]/2-160,255,255,255,200,"",0,"extrapolated_head_dmg: "..ishmael.funcs.blue..tostring(is_baimable(client.current_threat(),me,{2})))         
       -- renderer.text(ss[1]/2-265,ss[2]/2-160,255,255,255,200,"",0,"can_shoot: "..ishmael.funcs.blue..tostring(can_shoot(idx))..ishmael.funcs.skeet.." -> "..tostring(can_shoot(me)))         
        renderer.text(ss[1]/2-265,ss[2]/2-150,255,255,255,200,"",0,"last_risk: "..ishmael.funcs.blue..tostring(upd)..ishmael.funcs.skeet.." -> "..upd_stance.." -> "..dticks)         
        renderer.text(ss[1]/2-265,ss[2]/2-140,255,255,255,200,"",0,"cur_fando: "..ishmael.funcs.blue..tostring(entity.get_player_name(idx)))   
        renderer.text(ss[1]/2-265,ss[2]/2-130,255,255,255,200,"",0,"idx: "..ishmael.funcs.blue..tostring(entity.get_local_player())..ishmael.funcs.skeet.." -> "..idx)
       -- renderer.text(ss[1]/2-265,ss[2]/2-120,255,255,255,200,"",0,"head_damage: "..ishmael.funcs.blue..tostring(head_dmg[2])..ishmael.funcs.skeet.." -> "..entity.get_player_name(idx))
       -- renderer.text(ss[1]/2-265,ss[2]/2-110,255,255,255,200,"",0,"right_arm_damage: "..ishmael.funcs.blue..tostring(rightarm_dmg[2])..ishmael.funcs.skeet.." -> "..entity.get_player_name(idx))
        --renderer.text(ss[1]/2-265,ss[2]/2-100,255,255,255,200,"",0,"left_arm_damage: "..ishmael.funcs.blue..tostring(leftarm_dmg[2])..ishmael.funcs.skeet.." -> "..entity.get_player_name(idx))
        --renderer.text(ss[1]/2-265,ss[2]/2-90,255,255,255,200,"",0,"stomach_damage: "..ishmael.funcs.blue..tostring(stomach_dmg[2])..ishmael.funcs.skeet.." -> "..entity.get_player_name(idx))
        local dmginterp = anim.new("dmgint"):update(anim.types.LERP,math.floor(ishmael.funcs.total_damage(head_dmg[2],rightarm_dmg[2],leftarm_dmg[2],stomach_dmg[2])))
        renderer.text(ss[1]/2-265,ss[2]/2-120,255,255,255,200,"",0,"total_risk: "..ishmael.funcs.blue..dmginterp.."%")
    end

end

client.set_event_callback("game_newmap",upd_clantag)

client.set_event_callback("round_end",upd_clantag)

client.set_event_callback("round_start",upd_clantag)

client.set_event_callback("player_death",function(e)
    local me = entity.get_local_player()
    if not me then return end
    if client.userid_to_entindex(e.userid) == me then return end
    if client.userid_to_entindex(e.attacker) ~= me then return end
    if not ishmael.menu.misc.killsay:get() then return end
    client.delay_call(client.random_int(1,3),function()
        client.exec("say 1")
    end)
end)

client.set_event_callback("paint",function()
    watermark_render()
    indicators_render()
    debug_render()
  --  ban_ryan()
end)

client.set_event_callback("setup_command",function(cmd)
    fast_ladder(cmd)
    avoid_backstab(cmd)
    stance_setup(cmd)
    freestanding_setup(cmd)
    antiaim_setup(cmd)
    menufix(cmd)
    defensive_setup(cmd)
end)

client.set_event_callback("pre_render",function()
    animfix_setup()
end)

client.set_event_callback("shutdown",function()
    ishmael.funcs.display_menu(true)
end)
